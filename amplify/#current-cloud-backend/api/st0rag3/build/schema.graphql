
type S3Object {
  bucket: String!
  region: String!
  key: String!
  type: String
}

type File @aws_cognito_user_pools {
  id: ID!
  name: String
  owner: String
  labels: [String]
  file: S3Object
  type: String
  createdAt: String
  size: Int
  updatedAt: AWSDateTime!
}

type Social {
  name: String!
  url: String!
}

type Profile @aws_cognito_user_pools {
  id: ID!
  email: String!
  identityId: String!
  name: String
  profilePic: S3Object
  backgroundPic: S3Object
  bio: String
  socials: [Social]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input S3ObjectInput {
  bucket: String!
  region: String!
  key: String!
  type: String
}

type ModelFileConnection {
  items: [File]!
  nextToken: String
}

input ModelFileFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  owner: ModelStringInput
  labels: ModelStringInput
  type: ModelStringInput
  createdAt: ModelStringInput
  size: ModelIntInput
  and: [ModelFileFilterInput]
  or: [ModelFileFilterInput]
  not: ModelFileFilterInput
}

type Query {
  getFile(id: ID!): File
  listFiles(filter: ModelFileFilterInput, limit: Int, nextToken: String): ModelFileConnection
  getProfile(id: ID!): Profile
  listProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String): ModelProfileConnection
}

input ModelFileConditionInput {
  name: ModelStringInput
  owner: ModelStringInput
  labels: ModelStringInput
  type: ModelStringInput
  createdAt: ModelStringInput
  size: ModelIntInput
  and: [ModelFileConditionInput]
  or: [ModelFileConditionInput]
  not: ModelFileConditionInput
}

input CreateFileInput {
  id: ID
  name: String
  owner: String
  labels: [String]
  file: S3ObjectInput
  type: String
  createdAt: String
  size: Int
}

input UpdateFileInput {
  id: ID!
  name: String
  owner: String
  labels: [String]
  file: S3ObjectInput
  type: String
  createdAt: String
  size: Int
}

input DeleteFileInput {
  id: ID!
}

type Mutation {
  createFile(input: CreateFileInput!, condition: ModelFileConditionInput): File
  updateFile(input: UpdateFileInput!, condition: ModelFileConditionInput): File
  deleteFile(input: DeleteFileInput!, condition: ModelFileConditionInput): File
  createProfile(input: CreateProfileInput!, condition: ModelProfileConditionInput): Profile
  updateProfile(input: UpdateProfileInput!, condition: ModelProfileConditionInput): Profile
  deleteProfile(input: DeleteProfileInput!, condition: ModelProfileConditionInput): Profile
}

type Subscription {
  onCreateFile(owner: String): File @aws_subscribe(mutations: ["createFile"])
  onUpdateFile(owner: String): File @aws_subscribe(mutations: ["updateFile"])
  onDeleteFile(owner: String): File @aws_subscribe(mutations: ["deleteFile"])
  onCreateProfile(owner: String): Profile @aws_subscribe(mutations: ["createProfile"])
  onUpdateProfile(owner: String): Profile @aws_subscribe(mutations: ["updateProfile"])
  onDeleteProfile(owner: String): Profile @aws_subscribe(mutations: ["deleteProfile"])
}

input SocialInput {
  name: String!
  url: String!
}

type ModelProfileConnection {
  items: [Profile]!
  nextToken: String
}

input ModelProfileFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  identityId: ModelStringInput
  name: ModelStringInput
  bio: ModelStringInput
  and: [ModelProfileFilterInput]
  or: [ModelProfileFilterInput]
  not: ModelProfileFilterInput
}

input ModelProfileConditionInput {
  email: ModelStringInput
  identityId: ModelStringInput
  name: ModelStringInput
  bio: ModelStringInput
  and: [ModelProfileConditionInput]
  or: [ModelProfileConditionInput]
  not: ModelProfileConditionInput
}

input CreateProfileInput {
  id: ID
  email: String!
  identityId: String!
  name: String
  profilePic: S3ObjectInput
  backgroundPic: S3ObjectInput
  bio: String
  socials: [SocialInput]
}

input UpdateProfileInput {
  id: ID!
  email: String
  identityId: String
  name: String
  profilePic: S3ObjectInput
  backgroundPic: S3ObjectInput
  bio: String
  socials: [SocialInput]
}

input DeleteProfileInput {
  id: ID!
}

